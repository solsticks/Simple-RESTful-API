// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestfulAPI.Web.UserContext;

namespace RestfulAPI.Web.Migrations
{
    [DbContext(typeof(UserDbContext))]
    partial class UserDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RestfulAPI.Web.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "9dcfa940-fab8-499d-bd81-6b3ba5d5c07c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25b40b3f-9b52-4d03-a39e-5420bd73df49",
                            Email = "olusola@adekan.com",
                            EmailConfirmed = false,
                            FirstName = "Olusola",
                            LastName = "Adekan",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Photo = "photo",
                            SecurityStamp = "a28608e0-afa2-45b7-89e9-51cc957072a2",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "20b7086c-dfb0-41ad-9a1b-ad554610be90",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "891f3762-b6c8-4eb8-b235-534f8fe2224e",
                            Email = "fred@chinazor.com",
                            EmailConfirmed = false,
                            FirstName = "Fred",
                            LastName = "Chinazor",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Photo = "photo",
                            SecurityStamp = "c3764d59-5a4e-4661-a1e7-39fd5e7bbfd4",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "22e227b5-14f2-4505-b569-ecdc1f249a20",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0dbafa83-d6bf-4c7c-b0f0-a07dab21c2b5",
                            Email = "neto@anyankah.com",
                            EmailConfirmed = false,
                            FirstName = "Neto",
                            LastName = "Anyankah",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Photo = "photo",
                            SecurityStamp = "14f43587-e410-42f1-beae-929e43790ef0",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "5fbe4d7e-b93f-4ddd-93df-164345b37695",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3414c0b-45c1-4acd-84e7-204dea62786a",
                            Email = "law@mang.com",
                            EmailConfirmed = false,
                            FirstName = "Lawrence",
                            LastName = "Mangdong",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Photo = "photo",
                            SecurityStamp = "ea4393bf-4789-422d-84a2-a8a770262eea",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "ab4d4862-3306-48dc-8ecd-36c3950df6d3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ffc0cd9-d5ca-4067-bbc0-56be60cc6883",
                            Email = "louis@otu.com",
                            EmailConfirmed = false,
                            FirstName = "Louis",
                            LastName = "Otu",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Photo = "photo",
                            SecurityStamp = "98f3d5c8-e652-4c08-8902-2802baba06b2",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "222fa466-f7d3-4085-819d-b4f2cdf804c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d3f91fd-f69e-4ad9-9671-b34052c7b0fe",
                            Email = "segun@maja.com",
                            EmailConfirmed = false,
                            FirstName = "Olusegun",
                            LastName = "Adaramaja",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Photo = "photo",
                            SecurityStamp = "dc8e8383-8555-4020-9a71-7396095d4e59",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "a6216ca3-6515-4702-a5c8-348c49b34c96",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bbdeb7fb-7e05-4564-9da7-d005e45ef073",
                            Email = "victor@nwike.com",
                            EmailConfirmed = false,
                            FirstName = "Victor",
                            LastName = "Nwike",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Photo = "photo",
                            SecurityStamp = "ac0fc952-5abf-46fc-b1da-07911e9c26f0",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "bc294d38-d44a-4195-bc1c-8742fa108f35",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cf70eae5-d91c-4d6f-966d-c0402b918474",
                            Email = "michael@nwosu.com",
                            EmailConfirmed = false,
                            FirstName = "Michael",
                            LastName = "Nwosu",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Photo = "photo",
                            SecurityStamp = "451fc33e-a470-4ef4-a935-5749500d80a2",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "d4b33f2d-6162-4c22-89fc-b611d1d1a0d8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bde447de-2f0a-4cd1-b84a-37970ffb9141",
                            Email = "seun@oye.com",
                            EmailConfirmed = false,
                            FirstName = "Oluwaseun",
                            LastName = "Oyetoyan",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Photo = "photo",
                            SecurityStamp = "4c3b1106-a259-49c1-8e10-701f58a87596",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "e07ecf77-f03e-4e20-af70-005d26ce7fcc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "95cf1a74-240d-48ad-b707-60c67986794e",
                            Email = "Kosi@anwizu.com",
                            EmailConfirmed = false,
                            FirstName = "Kosi",
                            LastName = "Nwizu",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Photo = "photo",
                            SecurityStamp = "019a5d8f-7425-4cea-95c8-4b566e07ea64",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "41653087-fd87-43c3-8f30-9955545dcabc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f164b9e7-7cc0-4c56-8a3a-4e1f5e3e1702",
                            Email = "chidi@oko.com",
                            EmailConfirmed = false,
                            FirstName = "Chidi",
                            LastName = "Okobia",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Photo = "photo",
                            SecurityStamp = "b731ec87-6092-4fdb-8c9b-a3df5a353ca5",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "be310ecc-305f-4fe3-850d-5d2d263ad715",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c8f2fe54-b075-45d5-bd4d-2cce0e9f216c",
                            Email = "tunde@ope.com",
                            EmailConfirmed = false,
                            FirstName = "Tunde",
                            LastName = "Ope",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Photo = "photo",
                            SecurityStamp = "f31d50f6-2dc9-4204-991e-4482173bca5e",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "a1c95170-0a58-4df3-bb2c-6dc65cb02f92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af1377ce-df38-4f76-81e0-75412af71f39",
                            Email = "ran@isi.com",
                            EmailConfirmed = false,
                            FirstName = "Ransom",
                            LastName = "Isiah",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            Photo = "photo",
                            SecurityStamp = "8857fa3f-5f38-4b58-846d-84903cc78fad",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RestfulAPI.Web.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RestfulAPI.Web.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestfulAPI.Web.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RestfulAPI.Web.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
